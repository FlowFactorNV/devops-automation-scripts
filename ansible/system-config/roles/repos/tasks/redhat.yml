# Red Hat repository setup

- name: Enable Codeready Builder for Red Hat, Required for EPEL
  community.general.rhsm_repository:
    name: "codeready-builder-for-rhel-{{ ansible_distribution_major_version }}-{{ ansible_architecture }}-rpms"

- name: Enable Ansible Automation Platform for Red Hat
  when: inventory_hostname in groups.ansible_hosts
  block:
    - name: "Disable old version {{ repo_ansible_aut_platform_old_version }} off Ansible Automation Platform for Red Hat"
      when: repo_ansible_aut_platform_old_version is defined
      tags:
        - aap_repo_removal
        - never
      community.general.rhsm_repository:
        name: "ansible-automation-platform-{{ repo_ansible_aut_platform_old_version }}-for-rhel-{{ ansible_distribution_major_version }}-{{ ansible_architecture }}-rpms"
        state: disabled

    - name: "Enable Ansible Automation Platform version {{ repo_ansible_aut_platform_version }} for Red Hat"
      tags:
        - aap_repo
      community.general.rhsm_repository:
        name: "ansible-automation-platform-{{ repo_ansible_aut_platform_version }}-for-rhel-{{ ansible_distribution_major_version }}-{{ ansible_architecture }}-rpms"
        state: enabled

- name: "Setup repositories"
  when: "item['name']|default(item) in repository_list and redhat_distribution in repository_list[item['name']|default(item)] and repository_list[item['name']|default(item)][redhat_distribution]['repo'] is defined"
  with_items: "{{ repositories[redhat_distribution] | default([]) }}"
  tags:
    - files
    - repos
  ansible.builtin.template:
    src: "{{ redhat_distribution }}/{{ repository_list[item['name'] | default(item)][redhat_distribution]['repo'] }}.j2"
    dest: "/etc/yum.repos.d/{{ repository_list[item['name'] | default(item)][redhat_distribution]['repo'] }}"
    owner: root
    group: root
    mode: 0644
    seuser: _default
    serole: _default
    setype: _default

- name: "Setup GPG keys for repositories"
  when: "item['name']|default(item) in repository_list and redhat_distribution in repository_list[item['name']|default(item)] and 'key' in repository_list[item['name']|default(item)][redhat_distribution]"
  with_items: "{{ repositories[redhat_distribution] | default([]) }}"
  tags:
    - files
    - repos
  ansible.builtin.copy:
    src: "{{ redhat_distribution }}/keys/{{ repository_list[item['name'] | default(item)][redhat_distribution]['key'] }}"
    dest: "/etc/pki/rpm-gpg/{{ repository_list[item['name'] | default(item)][redhat_distribution]['key'] }}"
    owner: root
    group: root
    mode: 0644
    seuser: _default
    serole: _default
    setype: _default

- name: "Setup repositories from defined rpms and ensure repo is disabled by default, unless enabled is specified."
  when: "item['name']|default(item) in repository_list and repository_list[item['name']|default(item)][redhat_distribution]['url'] is defined and repository_list[item['name']|default(item)][redhat_distribution]['url'].endswith('rpm')"
  with_items: "{{ repositories[redhat_distribution] | default([]) }}"
  tags:
    - files
    - repos
  ansible.builtin.dnf:
    name: "{{ repository_list[item['name'] | default(item)][redhat_distribution]['url'] }}"
    state: latest
    validate_certs: no
    disable_gpg_check: yes

- name: "Setup remote repositories (basic repo)"
  when: redhat_distribution in remote_repositories and item.endswith('repo')
  with_items: "{{ remote_repositories[redhat_distribution] | default([]) }}"
  tags:
    - files
    - repos
  ansible.builtin.get_url:
    url: "{{ item }}"
    dest: "/etc/yum.repos.d/{{ item | basename }}"
    owner: root
    group: root
    mode: 0644
    seuser: _default
    serole: _default
    setype: _default

- name: "Setup remote repositories (rpm repo)"
  when: redhat_distribution in remote_repositories and item.endswith('rpm')
  with_items: "{{ remote_repositories[redhat_distribution] | default([]) }}"
  tags:
    - files
    - repos
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: "present"

- name: Enable Stable Zabbix Release
  when: repo_zabbix_stable
  block:
    - name: Ensure Zabbix stable release is Activated
      ansible.builtin.command:
        cmd: "dnf config-manager --enable {{ item }}"
      loop:
        - zabbix
        - zabbix-sources

    - name: Ensure Zabbix unstable release is Disabled
      ansible.builtin.command:
        cmd: "dnf config-manager --disable {{ item }}"
      loop:
        - zabbix-unstable
        - zabbix-unstable-sources

- name: Enable Unstable Zabbix Release
  when: not repo_zabbix_stable
  block:
    - name: Ensure Zabbix unstable release is Activated
      ansible.builtin.command:
        cmd: "dnf config-manager --enable {{ item }}"
      loop:
        - zabbix-unstable
        - zabbix-unstable-sources

    - name: Ensure Zabbix stable release is Disabled
      ansible.builtin.command:
        cmd: "dnf config-manager --disable {{ item }}"
      loop:
        - zabbix
        - zabbix-sources

- name: Disable certain Zabbix Repos that do not exists
  when: repo_zabbix_version == '7.4'
  ansible.builtin.command:
    cmd: "dnf config-manager --disable {{ item }}"
  loop:
    - zabbix-third-party
    - zabbix-tools

- name: "Update dnf cache"
  tags:
    - repos
  ansible.builtin.dnf:
    update_cache: yes
